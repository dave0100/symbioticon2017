/*
 * YOMO-Service-Emulation with AHOI
 * [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0-yomo-emulator
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TanMedia;
import io.swagger.client.model.TanScheme;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TANSchemesApi {
    private ApiClient apiClient;

    public TANSchemesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TANSchemesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCurrentTanMedia
     * @param accessId The **accessId** for which to retrieve the current TAN media. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentTanMediaCall(Long accessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accesses/{accessId}/currenttanmedia"
            .replaceAll("\\{" + "accessId" + "\\}", apiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentTanMediaValidateBeforeCall(Long accessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling getCurrentTanMedia(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCurrentTanMediaCall(accessId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current TAN media.
     * Returns the currently selected TAN media for the access.
     * @param accessId The **accessId** for which to retrieve the current TAN media. (required)
     * @return TanMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TanMedia getCurrentTanMedia(Long accessId) throws ApiException {
        ApiResponse<TanMedia> resp = getCurrentTanMediaWithHttpInfo(accessId);
        return resp.getData();
    }

    /**
     * Get current TAN media.
     * Returns the currently selected TAN media for the access.
     * @param accessId The **accessId** for which to retrieve the current TAN media. (required)
     * @return ApiResponse&lt;TanMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TanMedia> getCurrentTanMediaWithHttpInfo(Long accessId) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentTanMediaValidateBeforeCall(accessId, null, null);
        Type localVarReturnType = new TypeToken<TanMedia>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current TAN media. (asynchronously)
     * Returns the currently selected TAN media for the access.
     * @param accessId The **accessId** for which to retrieve the current TAN media. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentTanMediaAsync(Long accessId, final ApiCallback<TanMedia> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentTanMediaValidateBeforeCall(accessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TanMedia>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentTanScheme
     * @param accessId The **accessId** for which to retrieve the current TAN scheme. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentTanSchemeCall(Long accessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accesses/{accessId}/currenttanscheme"
            .replaceAll("\\{" + "accessId" + "\\}", apiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentTanSchemeValidateBeforeCall(Long accessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling getCurrentTanScheme(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCurrentTanSchemeCall(accessId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current TAN scheme.
     * Returns the currently selected TAN scheme for the access.
     * @param accessId The **accessId** for which to retrieve the current TAN scheme. (required)
     * @return TanScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TanScheme getCurrentTanScheme(Long accessId) throws ApiException {
        ApiResponse<TanScheme> resp = getCurrentTanSchemeWithHttpInfo(accessId);
        return resp.getData();
    }

    /**
     * Get current TAN scheme.
     * Returns the currently selected TAN scheme for the access.
     * @param accessId The **accessId** for which to retrieve the current TAN scheme. (required)
     * @return ApiResponse&lt;TanScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TanScheme> getCurrentTanSchemeWithHttpInfo(Long accessId) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentTanSchemeValidateBeforeCall(accessId, null, null);
        Type localVarReturnType = new TypeToken<TanScheme>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current TAN scheme. (asynchronously)
     * Returns the currently selected TAN scheme for the access.
     * @param accessId The **accessId** for which to retrieve the current TAN scheme. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentTanSchemeAsync(Long accessId, final ApiCallback<TanScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentTanSchemeValidateBeforeCall(accessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TanScheme>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTanSchemes
     * @param accessId The **id** for the access for which to retrieve the TAN list (required)
     * @param maxAge Optional - in seconds - indicates the maximum acceptable         timeframe since the last refresh of the tan scheme list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTanSchemesCall(Long accessId, Long maxAge, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accesses/{accessId}/tanschemes"
            .replaceAll("\\{" + "accessId" + "\\}", apiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (maxAge != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max-age", maxAge));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTanSchemesValidateBeforeCall(Long accessId, Long maxAge, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling getTanSchemes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTanSchemesCall(accessId, maxAge, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List TAN schemes for access
     * Retrieves all available TAN schemes for access.
     * @param accessId The **id** for the access for which to retrieve the TAN list (required)
     * @param maxAge Optional - in seconds - indicates the maximum acceptable         timeframe since the last refresh of the tan scheme list. (optional)
     * @return List&lt;TanScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TanScheme> getTanSchemes(Long accessId, Long maxAge) throws ApiException {
        ApiResponse<List<TanScheme>> resp = getTanSchemesWithHttpInfo(accessId, maxAge);
        return resp.getData();
    }

    /**
     * List TAN schemes for access
     * Retrieves all available TAN schemes for access.
     * @param accessId The **id** for the access for which to retrieve the TAN list (required)
     * @param maxAge Optional - in seconds - indicates the maximum acceptable         timeframe since the last refresh of the tan scheme list. (optional)
     * @return ApiResponse&lt;List&lt;TanScheme&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TanScheme>> getTanSchemesWithHttpInfo(Long accessId, Long maxAge) throws ApiException {
        com.squareup.okhttp.Call call = getTanSchemesValidateBeforeCall(accessId, maxAge, null, null);
        Type localVarReturnType = new TypeToken<List<TanScheme>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List TAN schemes for access (asynchronously)
     * Retrieves all available TAN schemes for access.
     * @param accessId The **id** for the access for which to retrieve the TAN list (required)
     * @param maxAge Optional - in seconds - indicates the maximum acceptable         timeframe since the last refresh of the tan scheme list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTanSchemesAsync(Long accessId, Long maxAge, final ApiCallback<List<TanScheme>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTanSchemesValidateBeforeCall(accessId, maxAge, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TanScheme>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
