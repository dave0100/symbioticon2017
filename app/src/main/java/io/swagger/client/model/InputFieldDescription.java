/*
 * YOMO-Service-Emulation with AHOI
 * [Data Privacy](/sandboxmanager/#/privacy)  [Terms of Service](/sandboxmanager/#/terms)  [Imprint](https://sparkassen-hub.com/impressum/)  &copy; 2017 Starfinanz - Ein Unternehmen der Finanz Informatik
 *
 * OpenAPI spec version: 2.1.0-yomo-emulator
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputFieldDescription
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-05T14:43:56.054Z")
public class InputFieldDescription {
  /**
   * Internal ID for this field description
   */
  @JsonAdapter(IdEnum.Adapter.class)
  public enum IdEnum {
    USERNAME("USERNAME"),
    
    PIN("PIN"),
    
    TAN("TAN");

    private String value;

    IdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdEnum fromValue(String text) {
      for (IdEnum b : IdEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IdEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("id")
  private IdEnum id = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("masked")
  private Boolean masked = null;

  /**
   * Format of field value  Can be &#x60;DEFINITELYNUMERIC&#x60; (format is definitely numeric), &#x60;DEFINITELYALPHANUMERIC&#x60; (format is definitely alphanumeric),  &#x60;PROBABLYALPHANUMERIC&#x60; (format is probably alphanumeric; numeric is unlikely but possible), &#x60;PROBABLYNUMERIC&#x60; (format is probably  numeric; alphanumeric is unlikely but possible) or &#x60;UNSPECIFIED&#x60; (default, no hint available)
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    PROBABLYNUMERIC("PROBABLYNUMERIC"),
    
    DEFINITELYNUMERIC("DEFINITELYNUMERIC"),
    
    PROBABLYALPHANUMERIC("PROBABLYALPHANUMERIC"),
    
    DEFINITELYALPHANUMERIC("DEFINITELYALPHANUMERIC");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("format")
  private FormatEnum format = null;

  @SerializedName("lengthMin")
  private Integer lengthMin = null;

  @SerializedName("lengthMax")
  private Integer lengthMax = null;

  public InputFieldDescription id(IdEnum id) {
    this.id = id;
    return this;
  }

   /**
   * Internal ID for this field description
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Internal ID for this field description")
  public IdEnum getId() {
    return id;
  }

  public void setId(IdEnum id) {
    this.id = id;
  }

  public InputFieldDescription label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label for this field description (e.g., &#39;PIN&#39;, &#39;Login name&#39;, &#39;Customer No.&#39;)
   * @return label
  **/
  @ApiModelProperty(required = true, value = "Label for this field description (e.g., 'PIN', 'Login name', 'Customer No.')")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public InputFieldDescription masked(Boolean masked) {
    this.masked = masked;
    return this;
  }

   /**
   * Flag that indicates whether the given field value must be masked when entered on client side or encrypted when persisted  on the server side
   * @return masked
  **/
  @ApiModelProperty(required = true, value = "Flag that indicates whether the given field value must be masked when entered on client side or encrypted when persisted  on the server side")
  public Boolean getMasked() {
    return masked;
  }

  public void setMasked(Boolean masked) {
    this.masked = masked;
  }

  public InputFieldDescription format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Format of field value  Can be &#x60;DEFINITELYNUMERIC&#x60; (format is definitely numeric), &#x60;DEFINITELYALPHANUMERIC&#x60; (format is definitely alphanumeric),  &#x60;PROBABLYALPHANUMERIC&#x60; (format is probably alphanumeric; numeric is unlikely but possible), &#x60;PROBABLYNUMERIC&#x60; (format is probably  numeric; alphanumeric is unlikely but possible) or &#x60;UNSPECIFIED&#x60; (default, no hint available)
   * @return format
  **/
  @ApiModelProperty(required = true, value = "Format of field value  Can be `DEFINITELYNUMERIC` (format is definitely numeric), `DEFINITELYALPHANUMERIC` (format is definitely alphanumeric),  `PROBABLYALPHANUMERIC` (format is probably alphanumeric; numeric is unlikely but possible), `PROBABLYNUMERIC` (format is probably  numeric; alphanumeric is unlikely but possible) or `UNSPECIFIED` (default, no hint available)")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public InputFieldDescription lengthMin(Integer lengthMin) {
    this.lengthMin = lengthMin;
    return this;
  }

   /**
   * Minimum length of field value (0 &#x3D; no limit)
   * @return lengthMin
  **/
  @ApiModelProperty(value = "Minimum length of field value (0 = no limit)")
  public Integer getLengthMin() {
    return lengthMin;
  }

  public void setLengthMin(Integer lengthMin) {
    this.lengthMin = lengthMin;
  }

  public InputFieldDescription lengthMax(Integer lengthMax) {
    this.lengthMax = lengthMax;
    return this;
  }

   /**
   * Maximum length of field value (0 &#x3D; no limit)
   * @return lengthMax
  **/
  @ApiModelProperty(value = "Maximum length of field value (0 = no limit)")
  public Integer getLengthMax() {
    return lengthMax;
  }

  public void setLengthMax(Integer lengthMax) {
    this.lengthMax = lengthMax;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputFieldDescription inputFieldDescription = (InputFieldDescription) o;
    return Objects.equals(this.id, inputFieldDescription.id) &&
        Objects.equals(this.label, inputFieldDescription.label) &&
        Objects.equals(this.masked, inputFieldDescription.masked) &&
        Objects.equals(this.format, inputFieldDescription.format) &&
        Objects.equals(this.lengthMin, inputFieldDescription.lengthMin) &&
        Objects.equals(this.lengthMax, inputFieldDescription.lengthMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, masked, format, lengthMin, lengthMax);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputFieldDescription {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    masked: ").append(toIndentedString(masked)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    lengthMin: ").append(toIndentedString(lengthMin)).append("\n");
    sb.append("    lengthMax: ").append(toIndentedString(lengthMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

